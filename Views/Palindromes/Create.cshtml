@model PalindromeStore.Entities.Palindrome

@{
    ViewData["Title"] = "Create";
}

<div class="jumbotron">
    <h1>Create Palindrome</h1>   
</div>

<div class="row">
    <div class="col-md-4">
        <form asp-action="Create">
            @if (!ViewData.ModelState.IsValid)
            {
                String modelErrormessages = String.Join(Environment.NewLine, ViewData.ModelState.Values.SelectMany(v => v.Errors)
                                                            .Select(v => v.ErrorMessage + " " + v.Exception));
                <span asp-validation-for="Text" class="text-danger">@modelErrormessages</span>
            }
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="Text" class="control-label"></label>
                <input asp-for="Text" class="form-control" />
                <span asp-validation-for="Text" class="text-danger"></span>
            </div>
            <div class="form-group">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
